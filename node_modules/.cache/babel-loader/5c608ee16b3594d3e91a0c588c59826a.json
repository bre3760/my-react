{"ast":null,"code":"var _jsxFileName = \"/Users/brendanpolidori/Desktop/project_repos/my-react.nosync/learn-react/src/components/JsonParse.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction JsonParse() {\n  _s();\n\n  const [cdmData, setCdmData] = useState([]);\n  useEffect(() => {\n    axios.get(`http://127.0.0.1:5000/api_cdm/available_data_test`) //.get(`http://127.0.0.1:5000/api_cdm/available_data`)\n    .then(res => {\n      // console.log(res)\n      setCdmData(res.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []); // const obj = JSON.parse(cdmData);\n  // console.log(obj)\n\n  console.log(cdmData);\n\n  function arrayConvert(json) {\n    var cities_arr = [];\n    var minMonthYear = {\n      \"year\": 3000,\n      \"month\": 12\n    };\n    var maxMonthYear = {\n      \"year\": 0,\n      \"month\": 0\n    }; // cycle all the cities\n\n    for (var city_key in json) {\n      var allDataOfCity = json[city_key]; // get the data for one city\n\n      var sourcesForCity = []; // this will contain the different source names for a city\n      // cycle all the sources\n\n      for (var datasource_key in allDataOfCity) {\n        var dataOfOneSource = [];\n        sourcesForCity.push(datasource_key); // push the name of the source to the list \n\n        dataOfOneSource = allDataOfCity[datasource_key]; // this is the data from one source \n        // cycle the data from one source \n\n        for (var year_key in dataOfOneSource) {\n          var oneYearData = [];\n          oneYearData.push(dataOfOneSource[year_key]);\n\n          for (var month_key in oneYearData) {\n            // check min and max values of the dates\n            if (parseInt(month_key) < minMonthYear[\"month\"] && year_key < parseInt(minMonthYear[\"year\"])) {\n              // this is the new minimum\n              minMonthYear[\"year\"] = parseInt(year_key);\n              minMonthYear[\"month\"] = parseInt(month_key);\n            } else if (parseInt(month_key) > minMonthYear[\"month\"] && year_key > parseInt(minMonthYear[\"year\"])) {} else {}\n          }\n\n          var allMonthOfOneYear = []; //console.log(dataOfOneSource[year_key]) // {\"10\":1025,\"11\":6385}\n        }\n      } // cycle through all the sources found and create the names for each aggregate\n\n\n      for (var i in sourcesForCity) {\n        cities_arr.push(city_key + \" \" + sourcesForCity[i]); //console.log(sourcesForCity[i])\n      } // while(typeof obj == 'object'){\n      //     for(var ind in obj){\n      //         if(key == null) key = ind;\n      //         obj = obj[ind];\n      //     }\n      // }\n\n    }\n\n    return cities_arr;\n  }\n\n  const arrayfromjson = arrayConvert(cdmData);\n  console.log(arrayfromjson);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n\n_s(JsonParse, \"Rp4szxWOApMRlsnq1bYja4ln4n8=\");\n\n_c = JsonParse;\nexport default JsonParse; // const json = \n//                 `{\"Torino\": {\n//                     \"big_data_db\": {\n//                         \"2017\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         },\n//                         \"2018\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         }\n//                     },\n//                     \"checco_db\": {\n//                         \"2017\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         },\n//                         \"2018\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         }\n//                     }\n//                 }\n//             }`;\n\nvar _c;\n\n$RefreshReg$(_c, \"JsonParse\");","map":{"version":3,"sources":["/Users/brendanpolidori/Desktop/project_repos/my-react.nosync/learn-react/src/components/JsonParse.js"],"names":["React","useState","useEffect","axios","JsonParse","cdmData","setCdmData","get","then","res","data","catch","err","console","log","arrayConvert","json","cities_arr","minMonthYear","maxMonthYear","city_key","allDataOfCity","sourcesForCity","datasource_key","dataOfOneSource","push","year_key","oneYearData","month_key","parseInt","allMonthOfOneYear","i","arrayfromjson"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nfunction JsonParse() {\n\n\n\n    const [cdmData, setCdmData] = useState([])\n\t\n\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.get(`http://127.0.0.1:5000/api_cdm/available_data_test`)\n            //.get(`http://127.0.0.1:5000/api_cdm/available_data`)\n\t\t\t.then(res => {\n                // console.log(res)\n                setCdmData(res.data)\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err)\n\t\t\t})\n\t}, [])\n    \n\n    // const obj = JSON.parse(cdmData);\n    // console.log(obj)\n    console.log(cdmData)\n\n\n    function arrayConvert(json){\n        var cities_arr = [];\n        var minMonthYear = {\"year\":3000,\"month\":12}\n        var maxMonthYear = {\"year\":0,\"month\":0}\n        // cycle all the cities\n        for(var city_key in json){\n            var allDataOfCity = json[city_key]; // get the data for one city\n            var sourcesForCity = []; // this will contain the different source names for a city\n            // cycle all the sources\n            for(var datasource_key in allDataOfCity){\n                var dataOfOneSource = []\n                sourcesForCity.push(datasource_key) // push the name of the source to the list \n                dataOfOneSource = allDataOfCity[datasource_key] // this is the data from one source \n                \n                // cycle the data from one source \n                for (var year_key in dataOfOneSource) {\n                    var oneYearData = []\n                    oneYearData.push(dataOfOneSource[year_key])\n                    for (var month_key in oneYearData) {\n                        // check min and max values of the dates\n                        if ( parseInt(month_key) <minMonthYear[\"month\"] && year_key<parseInt(minMonthYear[\"year\"])  ) {\n                            // this is the new minimum\n                            minMonthYear[\"year\"] = parseInt(year_key)\n                            minMonthYear[\"month\"] = parseInt(month_key)\n                        } else if (parseInt(month_key) > minMonthYear[\"month\"] && year_key > parseInt(minMonthYear[\"year\"])) {\n                            \n                        } else {\n\n                        }\n                        \n                        \n                    }\n                    \n                    var allMonthOfOneYear = []\n\n                    //console.log(dataOfOneSource[year_key]) // {\"10\":1025,\"11\":6385}\n                    \n                    \n                }\n\n                \n                \n\n            }\n            // cycle through all the sources found and create the names for each aggregate\n            for(var i in sourcesForCity){\n                cities_arr.push(city_key +\" \"+ sourcesForCity[i]);\n                //console.log(sourcesForCity[i])\n            }\n            \n            \n            // while(typeof obj == 'object'){\n            //     for(var ind in obj){\n            //         if(key == null) key = ind;\n            //         obj = obj[ind];\n            //     }\n            // }\n        }\n        return cities_arr;\n    }\n    const arrayfromjson = arrayConvert(cdmData)\n    console.log(arrayfromjson)\n    return (\n        <div>\n           {/* {JSON.stringify(cdmData)} */}\n        </div>\n    )\n}\n\nexport default JsonParse\n\n\n\n// const json = \n//                 `{\"Torino\": {\n//                     \"big_data_db\": {\n//                         \"2017\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         },\n//                         \"2018\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         }\n//                     },\n//                     \"checco_db\": {\n//                         \"2017\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         },\n//                         \"2018\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         }\n//                     }\n//                 }\n//             }`;"]},"metadata":{},"sourceType":"module"}