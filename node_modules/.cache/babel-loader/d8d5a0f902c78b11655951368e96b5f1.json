{"ast":null,"code":"var _jsxFileName = \"/Users/brendanpolidori/Desktop/project_repos/my-react.nosync/learn-react/src/components/JsonParse.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Heatmap from './plots/Heatmap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction JsonParse() {\n  _s();\n\n  const [cdmData, setCdmData] = useState([]);\n  useEffect(() => {\n    axios.get(`http://127.0.0.1:5000/api_cdm/available_data_test`) //.get(`http://127.0.0.1:5000/api_cdm/available_data`)\n    .then(res => {\n      // console.log(res)\n      setCdmData(res.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  console.log(cdmData);\n\n  function buildTimeLine(minimumMonthYear, maximumMonthYear) {\n    var timeLineArray = [];\n    var timeLineOfZeros = [];\n\n    for (let year = minimumMonthYear[\"year\"]; year <= maximumMonthYear[\"year\"]; year++) {\n      for (let month = 1; month < 13; month++) {\n        timeLineOfZeros.push(0);\n\n        if (month < 10) {\n          var topush = \"0\" + month.toString() + \"-\" + year.toString();\n        } else {\n          var topush = month.toString() + \"-\" + year.toString();\n        }\n\n        timeLineArray.push(topush);\n      }\n    }\n\n    return timeLineArray;\n  }\n\n  var minMonthYear = {\n    \"year\": 3000,\n    \"month\": 12\n  };\n  var maxMonthYear = {\n    \"year\": 0,\n    \"month\": 0\n  };\n\n  function arrayConvert(json) {\n    var dictOfCitiesTimeLineValues = {};\n    var cities_arr = [];\n    var valuesArrOfArr = []; // cycle all the cities\n\n    for (var city_key in json) {\n      var allDataOfCity = json[city_key]; // get the data for one city\n\n      var sourcesForCity = []; // this will contain the different source names for a city\n      // cycle all the sources\n\n      for (var datasource_key in allDataOfCity) {\n        var dataOfOneSource = [];\n        sourcesForCity.push(datasource_key); // push the name of the source to the list \n\n        dataOfOneSource = allDataOfCity[datasource_key]; // this is the data from one source \n\n        var totalDataForOneSouce = []; // cycle the data from one source \n\n        for (var year_key in dataOfOneSource) {\n          var oneYearData = dataOfOneSource[year_key];\n          var yearlyDataValues = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n          for (var month_key in oneYearData) {\n            var numberMonth = parseInt(month_key);\n            var numberYear = parseInt(year_key);\n            yearlyDataValues[numberMonth] = oneYearData[month_key]; // check min and max values of the dates\n\n            if (numberYear < minMonthYear[\"year\"]) {\n              //if (numberMonth < minMonthYear[\"month\"]) {\n              // this is the new minimum\n              minMonthYear[\"year\"] = numberYear;\n              minMonthYear[\"month\"] = numberMonth; //}\n            } else if (numberYear > maxMonthYear[\"year\"]) {\n              // new maximum\n              maxMonthYear[\"year\"] = numberYear;\n              maxMonthYear[\"month\"] = numberMonth;\n            } else if (numberYear === maxMonthYear[\"year\"] || numberYear === minMonthYear[\"year\"]) {\n              if (numberMonth < minMonthYear[\"month\"]) {\n                // this is the new minimum\n                minMonthYear[\"month\"] = numberMonth;\n              }\n\n              if (numberMonth > maxMonthYear[\"month\"]) {\n                maxMonthYear[\"month\"] = numberMonth;\n              }\n            }\n          }\n\n          totalDataForOneSouce = totalDataForOneSouce.concat(yearlyDataValues);\n        } // end for on years\n\n\n        valuesArrOfArr.push(totalDataForOneSouce);\n      } // end for one source\n      //console.log(totalDataForOneSouce)\n\n\n      var timeLine = buildTimeLine(minMonthYear, maxMonthYear); // cycle through all the sources found and create the names for each aggregate\n\n      for (var i in sourcesForCity) {\n        cities_arr.push(city_key + \" \" + sourcesForCity[i]); //console.log(sourcesForCity[i])\n      }\n    } // end for on cities\n\n\n    dictOfCitiesTimeLineValues[\"cities\"] = cities_arr;\n    dictOfCitiesTimeLineValues[\"timeLine\"] = timeLine;\n    dictOfCitiesTimeLineValues[\"values\"] = valuesArrOfArr;\n    return dictOfCitiesTimeLineValues;\n  }\n\n  const dictfromjson = arrayConvert(cdmData);\n  console.log(dictfromjson[\"cities\"]);\n  console.log(dictfromjson[\"timeLine\"]);\n  console.log(dictfromjson[\"values\"]);\n  return (\n    /*#__PURE__*/\n    // values\n    // timeLine\n    // cities\n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Heatmap, {\n        values: dictfromjson[\"values\"],\n        cities: dictfromjson[\"cities\"],\n        timeLine: dictfromjson[\"timeLine\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(JsonParse, \"Rp4szxWOApMRlsnq1bYja4ln4n8=\");\n\n_c = JsonParse;\nexport default JsonParse; // const json = \n//                 `{\"Torino\": {\n//                     \"big_data_db\": {\n//                         \"2017\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         },\n//                         \"2018\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         }\n//                     },\n//                     \"checco_db\": {\n//                         \"2017\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         },\n//                         \"2018\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         }\n//                     }\n//                 }\n//             }`;\n\nvar _c;\n\n$RefreshReg$(_c, \"JsonParse\");","map":{"version":3,"sources":["/Users/brendanpolidori/Desktop/project_repos/my-react.nosync/learn-react/src/components/JsonParse.js"],"names":["React","useState","useEffect","axios","Heatmap","JsonParse","cdmData","setCdmData","get","then","res","data","catch","err","console","log","buildTimeLine","minimumMonthYear","maximumMonthYear","timeLineArray","timeLineOfZeros","year","month","push","topush","toString","minMonthYear","maxMonthYear","arrayConvert","json","dictOfCitiesTimeLineValues","cities_arr","valuesArrOfArr","city_key","allDataOfCity","sourcesForCity","datasource_key","dataOfOneSource","totalDataForOneSouce","year_key","oneYearData","yearlyDataValues","month_key","numberMonth","parseInt","numberYear","concat","timeLine","i","dictfromjson"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Heatmap from './plots/Heatmap'\n\nfunction JsonParse() {\n\n    const [cdmData, setCdmData] = useState([])\n\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.get(`http://127.0.0.1:5000/api_cdm/available_data_test`)\n            //.get(`http://127.0.0.1:5000/api_cdm/available_data`)\n\t\t\t.then(res => {\n                // console.log(res)\n                setCdmData(res.data)\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err)\n\t\t\t})\n\t}, [])\n    console.log(cdmData)\n\n    function buildTimeLine(minimumMonthYear,maximumMonthYear) {\n        var timeLineArray = []\n        var timeLineOfZeros = []\n        for (let year = minimumMonthYear[\"year\"]; year <= maximumMonthYear[\"year\"]; year++) {\n            for (let month = 1; month < 13; month++) {\n                timeLineOfZeros.push(0)\n                if (month < 10) {\n                    var topush = \"0\"+month.toString()  + \"-\" + year.toString()\n                }else{\n                    var topush = month.toString()  + \"-\" + year.toString()\n                }\n                timeLineArray.push(topush)\n            }\n        }\n        return timeLineArray;\n    }\n\n    var minMonthYear = {\"year\":3000,\"month\":12}\n    var maxMonthYear = {\"year\":0,\"month\":0}\n\n    function arrayConvert(json){\n        var dictOfCitiesTimeLineValues = {}\n        var cities_arr = [];\n        var valuesArrOfArr = []\n        // cycle all the cities\n        for(var city_key in json){\n            var allDataOfCity = json[city_key]; // get the data for one city\n            var sourcesForCity = []; // this will contain the different source names for a city\n            // cycle all the sources\n            for(var datasource_key in allDataOfCity){\n                var dataOfOneSource = []\n                sourcesForCity.push(datasource_key) // push the name of the source to the list \n                dataOfOneSource = allDataOfCity[datasource_key] // this is the data from one source \n                var totalDataForOneSouce = []\n                // cycle the data from one source \n                for (var year_key in dataOfOneSource) {\n                    var oneYearData = dataOfOneSource[year_key]\n                    var yearlyDataValues = [0,0,0,0,0,0,0,0,0,0,0,0]\n                    for (var month_key in oneYearData) {\n                        \n                        var numberMonth = parseInt(month_key)\n                        var numberYear = parseInt(year_key)\n                        \n                        yearlyDataValues[numberMonth] = oneYearData[month_key]\n                        // check min and max values of the dates\n                        if (   numberYear < minMonthYear[\"year\"]  ) {\n                            //if (numberMonth < minMonthYear[\"month\"]) {\n                                // this is the new minimum\n                            minMonthYear[\"year\"] = numberYear\n                            minMonthYear[\"month\"] = numberMonth\n                            //}\n                            \n                        } else if (  numberYear > maxMonthYear[\"year\"] ) {\n                            // new maximum\n                            maxMonthYear[\"year\"] = numberYear\n                            maxMonthYear[\"month\"] = numberMonth\n                           \n                        } else if(numberYear === maxMonthYear[\"year\"] || numberYear === minMonthYear[\"year\"] ) {\n                            if (numberMonth < minMonthYear[\"month\"]) {\n                                // this is the new minimum\n                                minMonthYear[\"month\"] = numberMonth\n                            }\n                            if (numberMonth > maxMonthYear[\"month\"]) {\n                                maxMonthYear[\"month\"] = numberMonth\n                            }\n                        }\n                    }\n                    totalDataForOneSouce = totalDataForOneSouce.concat(yearlyDataValues)\n                }// end for on years\n                valuesArrOfArr.push(totalDataForOneSouce)\n            }// end for one source\n            //console.log(totalDataForOneSouce)\n            var timeLine = buildTimeLine(minMonthYear,maxMonthYear)\n\n            // cycle through all the sources found and create the names for each aggregate\n            for(var i in sourcesForCity){\n                cities_arr.push(city_key + \" \" + sourcesForCity[i]);\n                //console.log(sourcesForCity[i])\n            }\n            \n            \n            \n        }// end for on cities\n        dictOfCitiesTimeLineValues[\"cities\"] = cities_arr;\n        dictOfCitiesTimeLineValues[\"timeLine\"] = timeLine;\n        dictOfCitiesTimeLineValues[\"values\"] = valuesArrOfArr;\n        return dictOfCitiesTimeLineValues;\n    }\n    const dictfromjson = arrayConvert(cdmData)\n    \n    console.log(dictfromjson[\"cities\"])\n    console.log(dictfromjson[\"timeLine\"])\n    console.log(dictfromjson[\"values\"])\n    return (\n// values\n// timeLine\n// cities\n        <div>\n           <Heatmap values = {dictfromjson[\"values\"]} cities = {dictfromjson[\"cities\"]} timeLine = {dictfromjson[\"timeLine\"]}  ></Heatmap>\n        </div>\n    )\n}\n\nexport default JsonParse\n\n\n\n// const json = \n//                 `{\"Torino\": {\n//                     \"big_data_db\": {\n//                         \"2017\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         },\n//                         \"2018\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         }\n//                     },\n//                     \"checco_db\": {\n//                         \"2017\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         },\n//                         \"2018\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         }\n//                     }\n//                 }\n//             }`;\n"]},"metadata":{},"sourceType":"module"}