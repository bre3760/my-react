{"ast":null,"code":"var _jsxFileName = \"/Users/brendanpolidori/Desktop/project_repos/my-react.nosync/learn-react/src/components/JsonParse.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction JsonParse() {\n  _s();\n\n  const [cdmData, setCdmData] = useState([]);\n  useEffect(() => {\n    axios.get(`http://127.0.0.1:5000/api_cdm/available_data_test`) //.get(`http://127.0.0.1:5000/api_cdm/available_data`)\n    .then(res => {\n      // console.log(res)\n      setCdmData(res.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  console.log(cdmData);\n\n  function buildTimeLine(minimumMonthYear, maximumMonthYear) {\n    var timeLineArray = [];\n\n    for (let year = minimumMonthYear[\"year\"]; year < maximumMonthYear[\"year\"]; year++) {\n      for (let month = 0; month < 13; month++) {\n        var topush = year.toString() + \"-\" + month.toString();\n        timeLineArray.push(topush);\n      }\n    }\n\n    return timeLineArray;\n  }\n\n  function arrayConvert(json) {\n    var cities_arr = [];\n    let minMonthYear = {\n      \"year\": 3000,\n      \"month\": 12\n    };\n    let maxMonthYear = {\n      \"year\": 0,\n      \"month\": 0\n    }; // cycle all the cities\n\n    for (var city_key in json) {\n      var allDataOfCity = json[city_key]; // get the data for one city\n\n      var sourcesForCity = []; // this will contain the different source names for a city\n      // cycle all the sources\n\n      for (var datasource_key in allDataOfCity) {\n        var dataOfOneSource = [];\n        sourcesForCity.push(datasource_key); // push the name of the source to the list \n\n        dataOfOneSource = allDataOfCity[datasource_key]; // this is the data from one source \n        // cycle the data from one source \n\n        for (var year_key in dataOfOneSource) {\n          var oneYearData = dataOfOneSource[year_key];\n\n          for (var month_key in oneYearData) {\n            var numberMonth = parseInt(month_key);\n            var numberYear = parseInt(year_key); // check min and max values of the dates\n\n            if (numberYear < minMonthYear[\"year\"]) {\n              //if (numberMonth < minMonthYear[\"month\"]) {\n              // this is the new minimum\n              minMonthYear[\"year\"] = numberYear;\n              minMonthYear[\"month\"] = numberMonth; //}\n            } else if (numberYear > maxMonthYear[\"year\"]) {\n              // new maximum\n              maxMonthYear[\"year\"] = numberYear;\n              maxMonthYear[\"month\"] = numberMonth;\n            } else if (numberYear == maxMonthYear[\"year\"] || numberYear == minMonthYear[\"year\"]) {\n              if (numberMonth < minMonthYear[\"month\"]) {\n                // this is the new minimum\n                minMonthYear[\"month\"] = numberMonth;\n              }\n\n              if (numberMonth > maxMonthYear[\"month\"]) {\n                maxMonthYear[\"month\"] = numberMonth;\n              }\n            }\n          }\n        }\n      } // cycle through all the sources found and create the names for each aggregate\n\n\n      for (var i in sourcesForCity) {\n        cities_arr.push(city_key + \" \" + sourcesForCity[i]); //console.log(sourcesForCity[i])\n      } // while(typeof obj == 'object'){\n      //     for(var ind in obj){\n      //         if(key == null) key = ind;\n      //         obj = obj[ind];\n      //     }\n      // }\n\n    }\n\n    return cities_arr;\n  }\n\n  const arrayfromjson = arrayConvert(cdmData);\n  console.log(arrayfromjson);\n  const timeLine = buildTimeLine(minMonthYear, maxMonthYear);\n  console.log(timeLine);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n}\n\n_s(JsonParse, \"Rp4szxWOApMRlsnq1bYja4ln4n8=\");\n\n_c = JsonParse;\nexport default JsonParse; // const json = \n//                 `{\"Torino\": {\n//                     \"big_data_db\": {\n//                         \"2017\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         },\n//                         \"2018\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         }\n//                     },\n//                     \"checco_db\": {\n//                         \"2017\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         },\n//                         \"2018\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         }\n//                     }\n//                 }\n//             }`;\n\nvar _c;\n\n$RefreshReg$(_c, \"JsonParse\");","map":{"version":3,"sources":["/Users/brendanpolidori/Desktop/project_repos/my-react.nosync/learn-react/src/components/JsonParse.js"],"names":["React","useState","useEffect","axios","JsonParse","cdmData","setCdmData","get","then","res","data","catch","err","console","log","buildTimeLine","minimumMonthYear","maximumMonthYear","timeLineArray","year","month","topush","toString","push","arrayConvert","json","cities_arr","minMonthYear","maxMonthYear","city_key","allDataOfCity","sourcesForCity","datasource_key","dataOfOneSource","year_key","oneYearData","month_key","numberMonth","parseInt","numberYear","i","arrayfromjson","timeLine"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nfunction JsonParse() {\n\n    const [cdmData, setCdmData] = useState([])\n\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.get(`http://127.0.0.1:5000/api_cdm/available_data_test`)\n            //.get(`http://127.0.0.1:5000/api_cdm/available_data`)\n\t\t\t.then(res => {\n                // console.log(res)\n                setCdmData(res.data)\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err)\n\t\t\t})\n\t}, [])\n\n    console.log(cdmData)\n\n\n    function buildTimeLine(minimumMonthYear,maximumMonthYear) {\n        var timeLineArray = []\n        for (let year = minimumMonthYear[\"year\"]; year < maximumMonthYear[\"year\"]; year++) {\n            for (let month = 0; month < 13; month++) {\n                var topush = year.toString() + \"-\" + month.toString()\n                timeLineArray.push(topush)\n            }\n        }\n        return timeLineArray;\n    }\n\n\n\n\n    function arrayConvert(json){\n        \n        var cities_arr = [];\n        let minMonthYear = {\"year\":3000,\"month\":12}\n        let maxMonthYear = {\"year\":0,\"month\":0}\n        // cycle all the cities\n        for(var city_key in json){\n            var allDataOfCity = json[city_key]; // get the data for one city\n            var sourcesForCity = []; // this will contain the different source names for a city\n            // cycle all the sources\n            for(var datasource_key in allDataOfCity){\n                var dataOfOneSource = []\n                sourcesForCity.push(datasource_key) // push the name of the source to the list \n                dataOfOneSource = allDataOfCity[datasource_key] // this is the data from one source \n                \n                // cycle the data from one source \n                for (var year_key in dataOfOneSource) {\n                    var oneYearData = dataOfOneSource[year_key]\n                    \n                    for (var month_key in oneYearData) {\n                        \n                        var numberMonth = parseInt(month_key)\n                        var numberYear = parseInt(year_key)\n                        \n                        // check min and max values of the dates\n                        if (   numberYear < minMonthYear[\"year\"]  ) {\n                            //if (numberMonth < minMonthYear[\"month\"]) {\n                                // this is the new minimum\n                            minMonthYear[\"year\"] = numberYear\n                            minMonthYear[\"month\"] = numberMonth\n                            //}\n                            \n                        } else if (  numberYear > maxMonthYear[\"year\"] ) {\n                            // new maximum\n                            maxMonthYear[\"year\"] = numberYear\n                            maxMonthYear[\"month\"] = numberMonth\n                           \n                        } else if(numberYear == maxMonthYear[\"year\"] || numberYear == minMonthYear[\"year\"] ) {\n                            if (numberMonth < minMonthYear[\"month\"]) {\n                                // this is the new minimum\n                                minMonthYear[\"month\"] = numberMonth\n                            }\n                            if (numberMonth > maxMonthYear[\"month\"]) {\n                                maxMonthYear[\"month\"] = numberMonth\n                            }\n                        }\n                    }\n                }\n            }\n            // cycle through all the sources found and create the names for each aggregate\n            for(var i in sourcesForCity){\n                cities_arr.push(city_key + \" \" + sourcesForCity[i]);\n                //console.log(sourcesForCity[i])\n            }\n            \n            \n            // while(typeof obj == 'object'){\n            //     for(var ind in obj){\n            //         if(key == null) key = ind;\n            //         obj = obj[ind];\n            //     }\n            // }\n        }\n        return cities_arr;\n    }\n    const arrayfromjson = arrayConvert(cdmData)\n    console.log(arrayfromjson)\n    const timeLine = buildTimeLine(minMonthYear,maxMonthYear)\n    console.log(timeLine)\n    return (\n        <div>\n           {/* {JSON.stringify(cdmData)} */}\n        </div>\n    )\n}\n\nexport default JsonParse\n\n\n\n// const json = \n//                 `{\"Torino\": {\n//                     \"big_data_db\": {\n//                         \"2017\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         },\n//                         \"2018\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         }\n//                     },\n//                     \"checco_db\": {\n//                         \"2017\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         },\n//                         \"2018\": {\n//                             \"10\": 103186,\n//                             \"11\": 67762,\n//                             \"12\": 95512\n//                         }\n//                     }\n//                 }\n//             }`;"]},"metadata":{},"sourceType":"module"}